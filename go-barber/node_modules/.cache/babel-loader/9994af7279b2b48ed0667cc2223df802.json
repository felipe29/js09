{"ast":null,"code":"import { persistStore } from 'redux-persist';\nimport createSagaMiddleware from 'redux-saga';\nimport createStore from './createStore';\nimport rootReducer from './modules/rootReducer';\nimport rootSaga from './modules/rootSaga';\nimport persistedReducer from './persistReducers';\nconst sagaMonitor = process.env.NODE_ENV === 'development' ? console.tron.createSagaMonitor() : null;\nconst sagaMiddlewares = createSagaMiddleware({\n  sagaMonitor\n});\nconst middlewares = [sagaMiddlewares];\nconst store = createStore(persistedReducer(rootReducer), middlewares);\nconst persistor = persistStore(store);\nsagaMiddlewares.run(rootSaga);\nexport { store, persistor };","map":{"version":3,"sources":["/home/felipe/github/modulo09/go-barber-react/src/store/index.js"],"names":["persistStore","createSagaMiddleware","createStore","rootReducer","rootSaga","persistedReducer","sagaMonitor","process","env","NODE_ENV","console","tron","createSagaMonitor","sagaMiddlewares","middlewares","store","persistor","run"],"mappings":"AAAA,SAASA,YAAT,QAA6B,eAA7B;AAEA,OAAOC,oBAAP,MAAiC,YAAjC;AACA,OAAOC,WAAP,MAAwB,eAAxB;AAEA,OAAOC,WAAP,MAAwB,uBAAxB;AACA,OAAOC,QAAP,MAAqB,oBAArB;AACA,OAAOC,gBAAP,MAA6B,mBAA7B;AAEA,MAAMC,WAAW,GACfC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,aAAzB,GACIC,OAAO,CAACC,IAAR,CAAaC,iBAAb,EADJ,GAEI,IAHN;AAIA,MAAMC,eAAe,GAAGZ,oBAAoB,CAAC;AAAEK,EAAAA;AAAF,CAAD,CAA5C;AAEA,MAAMQ,WAAW,GAAG,CAACD,eAAD,CAApB;AAEA,MAAME,KAAK,GAAGb,WAAW,CAACG,gBAAgB,CAACF,WAAD,CAAjB,EAAgCW,WAAhC,CAAzB;AACA,MAAME,SAAS,GAAGhB,YAAY,CAACe,KAAD,CAA9B;AACAF,eAAe,CAACI,GAAhB,CAAoBb,QAApB;AACA,SAASW,KAAT,EAAgBC,SAAhB","sourcesContent":["import { persistStore } from 'redux-persist';\n\nimport createSagaMiddleware from 'redux-saga';\nimport createStore from './createStore';\n\nimport rootReducer from './modules/rootReducer';\nimport rootSaga from './modules/rootSaga';\nimport persistedReducer from './persistReducers';\n\nconst sagaMonitor =\n  process.env.NODE_ENV === 'development'\n    ? console.tron.createSagaMonitor()\n    : null;\nconst sagaMiddlewares = createSagaMiddleware({ sagaMonitor });\n\nconst middlewares = [sagaMiddlewares];\n\nconst store = createStore(persistedReducer(rootReducer), middlewares);\nconst persistor = persistStore(store);\nsagaMiddlewares.run(rootSaga);\nexport { store, persistor };\n"]},"metadata":{},"sourceType":"module"}