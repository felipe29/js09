{"ast":null,"code":"import { takeLatest, call, put, all } from 'redux-saga/effects';\nimport { toast } from 'react-toastify';\nimport api from \"../../../services/api\";\nimport history from \"../../../services/history\";\nimport { signInSuccess, signFailure } from './actions';\nexport function* sigIn({\n  payload\n}) {\n  try {\n    const email = payload.email,\n          password = payload.password;\n    const response = yield call(api.post, 'session', {\n      email,\n      password\n    });\n    const _response$data = response.data,\n          token = _response$data.token,\n          user = _response$data.user;\n\n    if (!user.provider) {\n      toast.error('Desculpe essa aplicacao é apenas para prestadores');\n      return;\n    }\n\n    yield put(signInSuccess(token, user));\n\n    if (token) {\n      api.defaults.headers.Authorization = \"Bearer \".concat(token);\n    }\n\n    history.push('/dashboard');\n  } catch (err) {\n    toast.error('Falha na autenticação, verifique seus dados');\n    yield put(signFailure());\n  }\n}\nexport function* sigUp({\n  payload\n}) {\n  try {\n    const name = payload.name,\n          email = payload.email,\n          password = payload.password;\n    yield call(api.post, 'users', {\n      name,\n      email,\n      password,\n      provider: true\n    });\n    history.push('/');\n  } catch (err) {\n    toast.error('Falha no cadastro verifique seus dados');\n    yield put(signFailure());\n  }\n}\nexport function setTokenOnApi({\n  payload\n}) {\n  if (!payload) return;\n  const token = payload.auth.token;\n\n  if (token) {\n    api.defaults.headers.Authorization = \"Bearer \".concat(token);\n  }\n}\nexport function signOut() {\n  history.push('/');\n}\nexport default all([takeLatest('persist/REHYDRATE', setTokenOnApi), takeLatest('@auth/SIGN_IN_REQUEST', sigIn), takeLatest('@auth/SIGN_UP_REQUEST', sigUp), takeLatest('@auth/SIGN_OUT', signOut)]);","map":{"version":3,"sources":["/home/felipe/github/modulo09/go-barber-react/src/store/modules/auth/sagas.js"],"names":["takeLatest","call","put","all","toast","api","history","signInSuccess","signFailure","sigIn","payload","email","password","response","post","data","token","user","provider","error","defaults","headers","Authorization","push","err","sigUp","name","setTokenOnApi","auth","signOut"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,IAArB,EAA2BC,GAA3B,EAAgCC,GAAhC,QAA2C,oBAA3C;AACA,SAASC,KAAT,QAAsB,gBAAtB;AACA,OAAOC,GAAP,MAAgB,uBAAhB;AACA,OAAOC,OAAP,MAAoB,2BAApB;AACA,SAASC,aAAT,EAAwBC,WAAxB,QAA2C,WAA3C;AAEA,OAAO,UAAUC,KAAV,CAAgB;AAAEC,EAAAA;AAAF,CAAhB,EAA6B;AAClC,MAAI;AAAA,UACMC,KADN,GAC0BD,OAD1B,CACMC,KADN;AAAA,UACaC,QADb,GAC0BF,OAD1B,CACaE,QADb;AAGF,UAAMC,QAAQ,GAAG,MAAMZ,IAAI,CAACI,GAAG,CAACS,IAAL,EAAW,SAAX,EAAsB;AAAEH,MAAAA,KAAF;AAASC,MAAAA;AAAT,KAAtB,CAA3B;AAHE,2BAIsBC,QAAQ,CAACE,IAJ/B;AAAA,UAIMC,KAJN,kBAIMA,KAJN;AAAA,UAIaC,IAJb,kBAIaA,IAJb;;AAMF,QAAI,CAACA,IAAI,CAACC,QAAV,EAAoB;AAClBd,MAAAA,KAAK,CAACe,KAAN,CAAY,mDAAZ;AACA;AACD;;AAED,UAAMjB,GAAG,CAACK,aAAa,CAACS,KAAD,EAAQC,IAAR,CAAd,CAAT;;AACA,QAAID,KAAJ,EAAW;AACTX,MAAAA,GAAG,CAACe,QAAJ,CAAaC,OAAb,CAAqBC,aAArB,oBAA+CN,KAA/C;AACD;;AACDV,IAAAA,OAAO,CAACiB,IAAR,CAAa,YAAb;AACD,GAhBD,CAgBE,OAAOC,GAAP,EAAY;AACZpB,IAAAA,KAAK,CAACe,KAAN,CAAY,6CAAZ;AACA,UAAMjB,GAAG,CAACM,WAAW,EAAZ,CAAT;AACD;AACF;AAED,OAAO,UAAUiB,KAAV,CAAgB;AAAEf,EAAAA;AAAF,CAAhB,EAA6B;AAClC,MAAI;AAAA,UACMgB,IADN,GACgChB,OADhC,CACMgB,IADN;AAAA,UACYf,KADZ,GACgCD,OADhC,CACYC,KADZ;AAAA,UACmBC,QADnB,GACgCF,OADhC,CACmBE,QADnB;AAEF,UAAMX,IAAI,CAACI,GAAG,CAACS,IAAL,EAAW,OAAX,EAAoB;AAAEY,MAAAA,IAAF;AAAQf,MAAAA,KAAR;AAAeC,MAAAA,QAAf;AAAyBM,MAAAA,QAAQ,EAAE;AAAnC,KAApB,CAAV;AACAZ,IAAAA,OAAO,CAACiB,IAAR,CAAa,GAAb;AACD,GAJD,CAIE,OAAOC,GAAP,EAAY;AACZpB,IAAAA,KAAK,CAACe,KAAN,CAAY,wCAAZ;AACA,UAAMjB,GAAG,CAACM,WAAW,EAAZ,CAAT;AACD;AACF;AAED,OAAO,SAASmB,aAAT,CAAuB;AAAEjB,EAAAA;AAAF,CAAvB,EAAoC;AACzC,MAAI,CAACA,OAAL,EAAc;AAD2B,QAGjCM,KAHiC,GAGvBN,OAAO,CAACkB,IAHe,CAGjCZ,KAHiC;;AAKzC,MAAIA,KAAJ,EAAW;AACTX,IAAAA,GAAG,CAACe,QAAJ,CAAaC,OAAb,CAAqBC,aAArB,oBAA+CN,KAA/C;AACD;AACF;AAED,OAAO,SAASa,OAAT,GAAmB;AACxBvB,EAAAA,OAAO,CAACiB,IAAR,CAAa,GAAb;AACD;AAED,eAAepB,GAAG,CAAC,CACjBH,UAAU,CAAC,mBAAD,EAAsB2B,aAAtB,CADO,EAEjB3B,UAAU,CAAC,uBAAD,EAA0BS,KAA1B,CAFO,EAGjBT,UAAU,CAAC,uBAAD,EAA0ByB,KAA1B,CAHO,EAIjBzB,UAAU,CAAC,gBAAD,EAAmB6B,OAAnB,CAJO,CAAD,CAAlB","sourcesContent":["import { takeLatest, call, put, all } from 'redux-saga/effects';\nimport { toast } from 'react-toastify';\nimport api from '~/services/api';\nimport history from '~/services/history';\nimport { signInSuccess, signFailure } from './actions';\n\nexport function* sigIn({ payload }) {\n  try {\n    const { email, password } = payload;\n\n    const response = yield call(api.post, 'session', { email, password });\n    const { token, user } = response.data;\n\n    if (!user.provider) {\n      toast.error('Desculpe essa aplicacao é apenas para prestadores');\n      return;\n    }\n\n    yield put(signInSuccess(token, user));\n    if (token) {\n      api.defaults.headers.Authorization = `Bearer ${token}`;\n    }\n    history.push('/dashboard');\n  } catch (err) {\n    toast.error('Falha na autenticação, verifique seus dados');\n    yield put(signFailure());\n  }\n}\n\nexport function* sigUp({ payload }) {\n  try {\n    const { name, email, password } = payload;\n    yield call(api.post, 'users', { name, email, password, provider: true });\n    history.push('/');\n  } catch (err) {\n    toast.error('Falha no cadastro verifique seus dados');\n    yield put(signFailure());\n  }\n}\n\nexport function setTokenOnApi({ payload }) {\n  if (!payload) return;\n\n  const { token } = payload.auth;\n\n  if (token) {\n    api.defaults.headers.Authorization = `Bearer ${token}`;\n  }\n}\n\nexport function signOut() {\n  history.push('/');\n}\n\nexport default all([\n  takeLatest('persist/REHYDRATE', setTokenOnApi),\n  takeLatest('@auth/SIGN_IN_REQUEST', sigIn),\n  takeLatest('@auth/SIGN_UP_REQUEST', sigUp),\n  takeLatest('@auth/SIGN_OUT', signOut),\n]);\n"]},"metadata":{},"sourceType":"module"}