{"ast":null,"code":"import _defineProperty from \"/home/felipe/github/modulo09/go-barber-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"/home/felipe/github/modulo09/go-barber-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/felipe/github/modulo09/go-barber-react/src/components/Notifications/index.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState, useEffect, useMemo } from 'react';\nimport { MdNotifications } from 'react-icons/md';\nimport { parseISO, formatDistance } from 'date-fns';\nimport pt from 'date-fns/locale/pt';\nimport api from \"../../services/api\";\nimport { Container, Badge, NotificationList, Scroll, Notification } from './styles';\nexport default function Notifications() {\n  const _useState = useState(false),\n        _useState2 = _slicedToArray(_useState, 2),\n        visible = _useState2[0],\n        setVisible = _useState2[1];\n\n  const _useState3 = useState([]),\n        _useState4 = _slicedToArray(_useState3, 2),\n        notifications = _useState4[0],\n        setNotifications = _useState4[1];\n\n  const hasUnread = useMemo(() => !!notifications.find(notification => notification.read === false), [notifications]);\n  useEffect(() => {\n    async function loadNotifications() {\n      const response = await api.get('notification');\n      const data = response.data.map(notification => _objectSpread({}, notification, {\n        timeDistance: formatDistance(parseISO(notification.createdAt), new Date(), {\n          addSuffix: true,\n          locale: pt\n        })\n      }));\n      setNotifications(data);\n    }\n\n    loadNotifications();\n  }, []);\n\n  function handleToggleVisible() {\n    setVisible(!visible);\n  }\n\n  async function handlemarkAsRead(id) {\n    await api.put(\"notification/\".concat(id));\n    setNotifications(notifications.map(notification => notification._id === id ? _objectSpread({}, notification, {\n      read: true\n    }) : notification));\n  }\n\n  return React.createElement(Container, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }, React.createElement(Badge, {\n    onClick: handleToggleVisible,\n    hasUnread: hasUnread,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }, React.createElement(MdNotifications, {\n    color: \"#7159c1\",\n    size: 20,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  })), React.createElement(NotificationList, {\n    visible: visible,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, React.createElement(Scroll, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, notifications.map(notification => React.createElement(Notification, {\n    key: notification._id,\n    unread: !notification.read,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }, notification.content), React.createElement(\"time\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }, \" \", notification.timeDistance), !notification.read && React.createElement(\"button\", {\n    onClick: () => handlemarkAsRead(notification._id),\n    type: \"button\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }, \"Marcar como lida\"))))));\n}","map":{"version":3,"sources":["/home/felipe/github/modulo09/go-barber-react/src/components/Notifications/index.js"],"names":["React","useState","useEffect","useMemo","MdNotifications","parseISO","formatDistance","pt","api","Container","Badge","NotificationList","Scroll","Notification","Notifications","visible","setVisible","notifications","setNotifications","hasUnread","find","notification","read","loadNotifications","response","get","data","map","timeDistance","createdAt","Date","addSuffix","locale","handleToggleVisible","handlemarkAsRead","id","put","_id","content"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useMemo } from 'react';\nimport { MdNotifications } from 'react-icons/md';\nimport { parseISO, formatDistance } from 'date-fns';\nimport pt from 'date-fns/locale/pt';\nimport api from '~/services/api';\nimport {\n  Container,\n  Badge,\n  NotificationList,\n  Scroll,\n  Notification,\n} from './styles';\n\nexport default function Notifications() {\n  const [visible, setVisible] = useState(false);\n  const [notifications, setNotifications] = useState([]);\n\n  const hasUnread = useMemo(\n    () => !!notifications.find(notification => notification.read === false),\n    [notifications]\n  );\n\n  useEffect(() => {\n    async function loadNotifications() {\n      const response = await api.get('notification');\n\n      const data = response.data.map(notification => ({\n        ...notification,\n        timeDistance: formatDistance(\n          parseISO(notification.createdAt),\n          new Date(),\n          { addSuffix: true, locale: pt }\n        ),\n      }));\n\n      setNotifications(data);\n    }\n    loadNotifications();\n  }, []);\n  function handleToggleVisible() {\n    setVisible(!visible);\n  }\n\n  async function handlemarkAsRead(id) {\n    await api.put(`notification/${id}`);\n\n    setNotifications(\n      notifications.map(notification =>\n        notification._id === id ? { ...notification, read: true } : notification\n      )\n    );\n  }\n\n  return (\n    <Container>\n      <Badge onClick={handleToggleVisible} hasUnread={hasUnread}>\n        <MdNotifications color=\"#7159c1\" size={20} />\n      </Badge>\n\n      <NotificationList visible={visible}>\n        <Scroll>\n          {notifications.map(notification => (\n            <Notification key={notification._id} unread={!notification.read}>\n              <p>{notification.content}</p>\n              <time> {notification.timeDistance}</time>\n              {!notification.read && (\n                <button\n                  onClick={() => handlemarkAsRead(notification._id)}\n                  type=\"button\"\n                >\n                  Marcar como lida\n                </button>\n              )}\n            </Notification>\n          ))}\n        </Scroll>\n      </NotificationList>\n    </Container>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}